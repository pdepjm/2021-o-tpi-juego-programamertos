import wollok.game.*
import level.*
import levels.*
import players.*
import directions.*
import menu.*
import tile.*
import soundProducer.*

/*method initialize() {
 * 		soundProducer.provider(soundProviderMock)		
 } */
 
describe "player movements" {

	const p1 = new Player(
		id = 1,
		color = "purple",
		position = game.at(1, 15),
		upBind = keyboard.w(),
		downBind = keyboard.s(),
		leftBind = keyboard.a(),
		rightBind = keyboard.d(),
		bombKey = keyboard.q()
	)
	
	const p2 = new Player(
		id = 2,
		color = "yellow",
		position = game.at(1, 1),
		upBind = keyboard.up(),
		downBind = keyboard.down(),
		leftBind = keyboard.left(),
		rightBind = keyboard.right(),
		bombKey = keyboard.minusKey()
	)
	
	const solidTile = new SolidTile(position = game.at(5, 1))


     test "A player must be facing to the last direction he moved"{
     	
     }
    
	test "a player cannot go through a wall" {
		keyboard.right()
		p2.move(right)
		keyboard.right()
		p2.move(right)
		assert.equals(game.at(3, 1), p2.position())
	}
}



describe "player abilities" {

	const p1 = new Player(
		id = 1, 
		color = "purple", 
		position = game.at(1, 15), 
		upBind = keyboard.w(), 
		downBind = keyboard.s(), 
		leftBind = keyboard.a(), 
		rightBind = keyboard.d(), 
		bombKey = keyboard.q()
	)
	

}

describe "players interactions" {

	const p1 = new Player(
		id = 1, 
		color = "purple", 
		position = game.at(1, 15), 
		upBind = keyboard.w(), 
		downBind = keyboard.s(), 
		leftBind = keyboard.a(), 
		rightBind = keyboard.d(), 
		bombKey = keyboard.q()
	)

	test "a player dies when reached by a bomb" {
		p1.dropBomb()
		assert.notThat(game.hasVisual(p1))
	}
	
	test "a player dies when reached by bomb explosion" {
		4.times({any => p1.move(down)})
		game.schedule(500, {p1.dropBomb()} )
		game.schedule(500 * 1.1 , {p1.move(right)})
		game.schedule(500 * 1.2, {3.times(p1.move(up))})
		assert.notThat(game.hasVisual(p1))
	}

}
