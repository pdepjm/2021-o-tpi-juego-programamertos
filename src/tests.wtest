import wollok.game.*
import level.*
import levels.*
import players.*
import directions.*
import menu.*
import tile.*
import soundProducer.*

/*method initialize() {
		soundProducer.provider(soundProviderMock)		
	} */

describe "Player's Movements" {
	   const p1 = new Player(
                id = 1,
                color = "purple",
                position = game.at(1,15),
                upBind = keyboard.w(), 
                downBind = keyboard.s(), 
                leftBind = keyboard.a(), 
                rightBind = keyboard.d(),
                bombKey = keyboard.q()
            )

        const p2 = new Player(
            id = 2,
            color = "yellow",
            position = game.at(1,1),
            upBind = keyboard.up(), 
            downBind = keyboard.down(), 
            leftBind = keyboard.left(), 
            rightBind = keyboard.right(),
            bombKey = keyboard.minusKey()
        )
        
        var solidTile = new SolidTile(position = game.at(5 , 1))
         
	test "A player moves right" {
		p1.move(right) 
		assert.equals(game.at(2 , 15) , p1.position())
	}	
	
	
	test "A player moves left" {
		p2.move(right)
		p2.move(right)
		p2.move(left)
		assert.equals(game.at(2 , 1) , p2.position())
	}
	
	test "A player moves up" {
		p2.move(up)
		p2.move(up)
		assert.equals(game.at(1 , 3) , p2.position())
	}
	
	test "A player moves down" {
		p1.move(down)
		p1.move(down)
		assert.equals(game.at(1 , 13) , p1.position())
	}
	
	test "A player moves right with key 'right'"{
      p2.setup()
      keyboard.right()	 
	  p2.move(right)
	  keyboard.right()	
	  p2.move(right)
	  assert.equals(game.at(3 , 1) , p2.position())
	  }
	  
	  test "A player moves left with key 'A'"{
	  	p1.setup()
	  	keyboard.d()	 
	  	p1.move(right)
	  	keyboard.d()	 
	  	p1.move(right)
		keyboard.a()
		p1.move(left)
	  	assert.equals(game.at(2 , 15) , p1.position())
	  }
	  
	  test "A player moves up with key 'up'"{
	  	p2.setup()
	  	keyboard.up()
	  	p2.move(up)
	  	keyboard.up()
	  	p2.move(up)
	  	assert.equals(game.at(1 , 3) , p2.position())
	  }
	  
	  test "A player moves down with key 'S'"{
	  	p1.setup()
	  	keyboard.s()
	  	p1.move(down) 	
	  	keyboard.s()
	  	p1.move(down) 	
	  	assert.equals(game.at(1 , 13) , p1.position())
	  } 
	  
	  test "A player cannot go through a wall" {
	  	4.times({p2.move(right)})
	  	assert.equals(game.at(4 , 1) , p2.position())
	  }
}

describe "Player's Habilities"{
	 const p1 = new Player(
                id = 1,
                color = "purple",
                position = game.at(1,15),
                upBind = keyboard.w(), 
                downBind = keyboard.s(), 
                leftBind = keyboard.a(), 
                rightBind = keyboard.d(),
                bombKey = keyboard.q()
            )
      
      var destroyableTile = new DestroyableTile(position = game.at(3 , 15))
            
      test "A player drops a Bomb" {
         p1.move(right)
         p1.dropBomb()
         assert.that(not(game.hasVisual(destroyableTile)))
      }
      
      test "A player Drops a Bomb with key 'Q'"{
      	p1.setup()
      	destroyableTile.render()
      	keyboard.right()
      	keyboard.q()
      	assert.that(not(game.hasVisual(destroyableTile)))
      }
}

describe "Player's Interactions" {
	 const p1 = new Player(
                id = 1,
                color = "purple",
                position = game.at(1,15),
                upBind = keyboard.w(), 
                downBind = keyboard.s(), 
                leftBind = keyboard.a(), 
                rightBind = keyboard.d(),
                bombKey = keyboard.q()
            )
      
      test "A player dies when he drops a Bomb"{
      	p1.dropBomb()
      	assert.that(not(game.hasVisual(p1)))
      }
      
      test "A player dies when expansion is incoming"{
      	4.times(p1.move(down))
      	game.schedule(500 , p1.dropBomb())
      	game.schedule(500 * 1.1 , 3.times(p1.move(up)))
      	assert.that(not(game.hasVisual(p1)))
      }
}
